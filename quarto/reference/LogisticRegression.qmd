# LogisticRegression { #sklearn.linear_model.LogisticRegression }

`linear_model.LogisticRegression(self, penalty='l2', *, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=100, multi_class='deprecated', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)`

Logistic Regression (aka logit, MaxEnt) classifier.

In the multiclass case, the training algorithm uses the one-vs-rest (OvR)
scheme if the 'multi_class' option is set to 'ovr', and uses the
cross-entropy loss if the 'multi_class' option is set to 'multinomial'.
(Currently the 'multinomial' option is supported only by the 'lbfgs',
'sag', 'saga' and 'newton-cg' solvers.)

This class implements regularized logistic regression using the
'liblinear' library, 'newton-cg', 'sag', 'saga' and 'lbfgs' solvers. **Note
that regularization is applied by default**. It can handle both dense
and sparse input. Use C-ordered arrays or CSR matrices containing 64-bit
floats for optimal performance; any other input format will be converted
(and copied).

The 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization
with primal formulation, or no regularization. The 'liblinear' solver
supports both L1 and L2 regularization, with a dual formulation only for
the L2 penalty. The Elastic-Net regularization is only supported by the
'saga' solver.

Read more in the :ref:`User Guide <logistic_regression>`.

## Parameters

| Name                | Type                                                          | Description| Default   |
|---------------------|---------------------------------------------------------------||-----------|
| `penalty`           | (l1, l2, elasticnet, None)                                    | Specify the norm of the penalty:  - `None`: no penalty is added; - `'l2'`: add a L2 penalty term and it is the default choice; - `'l1'`: add a L1 penalty term; - `'elasticnet'`: both L1 and L2 penalty terms are added.  .. warning::    Some penalties may not work with some solvers. See the parameter    `solver` below, to know the compatibility between the penalty and    solver.  .. versionadded:: 0.19    l1 penalty with SAGA solver (allowing 'multinomial| `'l1'`    |
| `dual`              | bool                                                          | Dual (constrained) or primal (regularized, see also :ref:`this equation <regularized-logistic-loss>`) formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features| `False`   |
| `tol`               | float                                                         | Tolerance for stopping criteria| `1e-4`    |
| `C`                 | float                                                         | Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization| `1.0`     |
| `fit_intercept`     | bool                                                          | Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function| `True`    |
| `intercept_scaling` | float                                                         | Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a "synthetic" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | `1`       |
| `class_weight`      | dict or balanced                                              | Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The "balanced" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.  .. versionadded:: 0.17    *class_weight='balanced| `None`    |
| `random_state`      | int, RandomState instance                                     | Used when ``solver`` == 'sag', 'saga' or 'liblinear' to shuffle the data. See :term:`Glossary <random_state>` for details.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | `None`    |
| `solver`            | (lbfgs, liblinear, newton - cg, newton - cholesky, sag, saga) | Algorithm to use in the optimization problem. Default is 'lbfgs'. To choose a solver, you might want to consider the following aspects:  - For small datasets, 'liblinear' is a good choice, whereas 'sag'   and 'saga' are faster for large ones; - For multiclass problems, only 'newton-cg', 'sag', 'saga' and   'lbfgs' handle multinomial loss; - 'liblinear' and 'newton-cholesky' can only handle binary classification   by default. To apply a one-versus-rest scheme for the multiclass setting   one can wrapt it with the `OneVsRestClassifier`. - 'newton-cholesky' is a good choice for `n_samples` >> `n_features`,   especially with one-hot encoded categorical features with rare   categories. Be aware that the memory usage of this solver has a quadratic   dependency on `n_features` because it explicitly computes the Hessian   matrix.  .. warning::    The choice of the algorithm depends on the penalty chosen and on    (multinomial) multiclass support:     ================= ============================== ======================    solver            penalty                        multinomial multiclass    ================= ============================== ======================    'lbfgs'           'l2', None                     yes    'liblinear'       'l1', 'l2'                     no    'newton-cg'       'l2', None                     yes    'newton-cholesky' 'l2', None                     no    'sag'             'l2', None                     yes    'saga'            'elasticnet', 'l1', 'l2', None yes    ================= ============================== ======================  .. note::    'sag' and 'saga' fast convergence is only guaranteed on features    with approximately the same scale. You can preprocess the data with    a scaler from :mod:`sklearn.preprocessing`.  .. seealso::    Refer to the User Guide for more information regarding    :class:`LogisticRegression` and more specifically the    :ref:`Table <Logistic_regression>`    summarizing solver/penalty supports.  .. versionadded:: 0.17    Stochastic Average Gradient descent solver. .. versionadded:: 0.19    SAGA solver. .. versionchanged:: 0.22     The default solver changed from 'liblinear' to 'lbfgs' in 0.22. .. versionadded:: 1.2    newton-cholesky solver. | `'lbfgs'` |
| `max_iter`          | int                                                           | Maximum number of iterations taken for the solvers to converge| `100`     |
| `multi_class`       | (auto, ovr, multinomial)                                      | If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.  .. versionadded:: 0.18    Stochastic Average Gradient descent solver for 'multinomial' case. .. versionchanged:: 0.22     Default changed from 'ovr' to 'auto' in 0.22. .. deprecated:: 1.5    ``multi_class`` was deprecated in version 1.5 and will be removed in 1.7.    From then on, the recommended 'multinomial' will always be used for    `n_classes >= 3`.    Solvers that do not support 'multinomial' will raise an error.    Use `sklearn.multiclass.OneVsRestClassifier(LogisticRegression())` if you    still want to use Ov| `'auto'`  |
| `verbose`           | int                                                           | For the liblinear and lbfgs solvers set verbose to any positive number for verbosity| `0`       |
| `warm_start`        | bool                                                          | When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver. See :term:`the Glossary <warm_start>`.  .. versionadded:: 0.17    *warm_start* to support *lbfgs*, *newton-cg*, *sag*, *saga* solvers| `False`   |
| `n_jobs`            | int                                                           | Number of CPU cores used when parallelizing over classes if multi_class='ovr'". This parameter is ignored when the ``solver`` is set to 'liblinear' regardless of whether 'multi_class' is specified or not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details| `None`    |
| `l1_ratio`          | float                                                         | The Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``. Only used if ``penalty='elasticnet'``. Setting ``l1_ratio=0`` is equivalent to using ``penalty='l2'``, while setting ``l1_ratio=1`` is equivalent to using ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a combination of L1 and| `None`    |

## Attributes

| Name              | Type                                                        | Description                                                                                                                                                                                                                                                                                                                                              |
|-------------------|-------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| classes_          | ndarray of shape (n_classes, )                              | A list of class labels known to the classifier.                                                                                                                                                                                                                                                                                                          |
| coef_             | ndarray of shape (1, n_features) or (n_classes, n_features) | Coefficient of the features in the decision function.  `coef_` is of shape (1, n_features) when the given problem is binary. In particular, when `multi_class='multinomial'`, `coef_` corresponds to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False).                                                                                     |
| intercept_        | ndarray of shape (1,) or (n_classes,)                       | Intercept (a.k.a. bias) added to the decision function.  If `fit_intercept` is set to False, the intercept is set to zero. `intercept_` is of shape (1,) when the given problem is binary. In particular, when `multi_class='multinomial'`, `intercept_` corresponds to outcome 1 (True) and `-intercept_` corresponds to outcome 0 (False).             |
| n_features_in_    | int                                                         | Number of features seen during :term:`fit`.  .. versionadded:: 0.24                                                                                                                                                                                                                                                                                      |
| feature_names_in_ | ndarray of shape (`n_features_in_`,)                        | Names of features seen during :term:`fit`. Defined only when `X` has feature names that are all strings.  .. versionadded:: 1.0                                                                                                                                                                                                                          |
| n_iter_           | ndarray of shape (n_classes,) or (1, )                      | Actual number of iterations for all classes. If binary or multinomial, it returns only 1 element. For liblinear solver, only the maximum number of iteration across all classes is given.  .. versionchanged:: 0.20      In SciPy <= 1.0.0 the number of lbfgs iterations may exceed     ``max_iter``. ``n_iter_`` will now report at most ``max_iter``. |

## See Also

SGDClassifier : Incrementally trained logistic regression (when given
    the parameter ``loss="log_loss"``).
LogisticRegressionCV : Logistic regression with built-in cross validation.

## Notes

The underlying C implementation uses a random number generator to
select features when fitting the model. It is thus not uncommon,
to have slightly different results for the same input data. If
that happens, try with a smaller tol parameter.

Predict output may not match that of standalone liblinear in certain
cases. See :ref:`differences from liblinear <liblinear_differences>`
in the narrative documentation.

## References


L-BFGS-B -- Software for Large-scale Bound-constrained Optimization
    Ciyou Zhu, Richard Byrd, Jorge Nocedal and Jose Luis Morales.
    http://users.iems.northwestern.edu/~nocedal/lbfgsb.html

LIBLINEAR -- A Library for Large Linear Classification
    https://www.csie.ntu.edu.tw/~cjlin/liblinear/

SAG -- Mark Schmidt, Nicolas Le Roux, and Francis Bach
    Minimizing Finite Sums with the Stochastic Average Gradient
    https://hal.inria.fr/hal-00860051/document

SAGA -- Defazio, A., Bach F. & Lacoste-Julien S. (2014).
        :arxiv:`"SAGA: A Fast Incremental Gradient Method With Support
        for Non-Strongly Convex Composite Objectives" <1407.0202>`

Hsiang-Fu Yu, Fang-Lan Huang, Chih-Jen Lin (2011). Dual coordinate descent
    methods for logistic regression and maximum entropy models.
    Machine Learning 85(1-2):41-75.
    https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf

## Examples

```python
>>> from sklearn.datasets import load_iris
>>> from sklearn.linear_model import LogisticRegression
>>> X, y = load_iris(return_X_y=True)
>>> clf = LogisticRegression(random_state=0).fit(X, y)
>>> clf.predict(X[:2, :])
array([0, 0])
>>> clf.predict_proba(X[:2, :])
array([[9.8...e-01, 1.8...e-02, 1.4...e-08],
       [9.7...e-01, 2.8...e-02, ...e-08]])
>>> clf.score(X, y)
0.97...
```

## Methods

| Name | Description |
| --- | --- |
| [fit](#sklearn.linear_model.LogisticRegression.fit) | Fit the model according to the given training data. |
| [predict_log_proba](#sklearn.linear_model.LogisticRegression.predict_log_proba) | Predict logarithm of probability estimates. |
| [predict_proba](#sklearn.linear_model.LogisticRegression.predict_proba) | Probability estimates. |

### fit { #sklearn.linear_model.LogisticRegression.fit }

`linear_model.LogisticRegression.fit(X, y, sample_weight=None)`

Fit the model according to the given training data.

#### Parameters

| Name            | Type                                          | Description                                                                                                                                                                                 | Default      |
|-----------------|-----------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|
| `X`             | array-like, sparse matrix                     | Training vector, where `n_samples` is the number of samples and `n_features` is the number of features.                                                                                     | `array-like` |
| `y`             | array-like of shape (n_samples,)              | Target vector relative to X.                                                                                                                                                                | _required_   |
| `sample_weight` | array-like of shape (n_samples,) default=None | Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.  .. versionadded:: 0.17    *sample_weight* support to LogisticRegression. | `None`       |

#### Returns

| Type   | Description       |
|--------|-------------------|
| self   | Fitted estimator. |

#### Notes

The SAGA solver supports both float64 and float32 bit arrays.

### predict_log_proba { #sklearn.linear_model.LogisticRegression.predict_log_proba }

`linear_model.LogisticRegression.predict_log_proba(X)`

Predict logarithm of probability estimates.

The returned estimates for all classes are ordered by the
label of classes.

#### Parameters

| Name   | Type                                        | Description                                                                                                 | Default    |
|--------|---------------------------------------------|-------------------------------------------------------------------------------------------------------------|------------|
| `X`    | array-like of shape (n_samples, n_features) | Vector to be scored, where `n_samples` is the number of samples and `n_features` is the number of features. | _required_ |

#### Returns

| Type                                       | Description                                                                                                                        |
|--------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------|
| array-like of shape (n_samples, n_classes) | Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in ``self.classes_``. |

### predict_proba { #sklearn.linear_model.LogisticRegression.predict_proba }

`linear_model.LogisticRegression.predict_proba(X)`

Probability estimates.

The returned estimates for all classes are ordered by the
label of classes.

For a multi_class problem, if multi_class is set to be "multinomial"
the softmax function is used to find the predicted probability of
each class.
Else use a one-vs-rest approach, i.e. calculate the probability
of each class assuming it to be positive using the logistic function
and normalize these values across all the classes.

#### Parameters

| Name   | Type                                        | Description                                                                                                 | Default    |
|--------|---------------------------------------------|-------------------------------------------------------------------------------------------------------------|------------|
| `X`    | array-like of shape (n_samples, n_features) | Vector to be scored, where `n_samples` is the number of samples and `n_features` is the number of features. | _required_ |

#### Returns

| Type                                       | Description                                                                                                                    |
|--------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------|
| array-like of shape (n_samples, n_classes) | Returns the probability of the sample for each class in the model, where classes are ordered as they are in ``self.classes_``. |