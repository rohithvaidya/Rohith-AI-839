{"title":"LogisticRegression","markdown":{"headingText":"LogisticRegression","headingAttr":{"id":"sklearn.linear_model.LogisticRegression","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n`linear_model.LogisticRegression(self, penalty='l2', *, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=100, multi_class='deprecated', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)`\n\nLogistic Regression (aka logit, MaxEnt) classifier.\n\nIn the multiclass case, the training algorithm uses the one-vs-rest (OvR)\nscheme if the 'multi_class' option is set to 'ovr', and uses the\ncross-entropy loss if the 'multi_class' option is set to 'multinomial'.\n(Currently the 'multinomial' option is supported only by the 'lbfgs',\n'sag', 'saga' and 'newton-cg' solvers.)\n\nThis class implements regularized logistic regression using the\n'liblinear' library, 'newton-cg', 'sag', 'saga' and 'lbfgs' solvers. **Note\nthat regularization is applied by default**. It can handle both dense\nand sparse input. Use C-ordered arrays or CSR matrices containing 64-bit\nfloats for optimal performance; any other input format will be converted\n(and copied).\n\nThe 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization\nwith primal formulation, or no regularization. The 'liblinear' solver\nsupports both L1 and L2 regularization, with a dual formulation only for\nthe L2 penalty. The Elastic-Net regularization is only supported by the\n'saga' solver.\n\nRead more in the :ref:`User Guide <logistic_regression>`.\n\n## Parameters\n\n| Name                | Type                                                          | Description| Default   |\n|---------------------|---------------------------------------------------------------||-----------|\n| `penalty`           | (l1, l2, elasticnet, None)                                    | Specify the norm of the penalty:  - `None`: no penalty is added; - `'l2'`: add a L2 penalty term and it is the default choice; - `'l1'`: add a L1 penalty term; - `'elasticnet'`: both L1 and L2 penalty terms are added.  .. warning::    Some penalties may not work with some solvers. See the parameter    `solver` below, to know the compatibility between the penalty and    solver.  .. versionadded:: 0.19    l1 penalty with SAGA solver (allowing 'multinomial' + L1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | `'l1'`    |\n| `dual`              | bool                                                          | Dual (constrained) or primal (regularized, see also :ref:`this equation <regularized-logistic-loss>`) formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | `False`   |\n| `tol`               | float                                                         | Tolerance for stopping criteria| `1e-4`    |\n| `C`                 | float                                                         | Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization| `1.0`     |\n| `fit_intercept`     | bool                                                          | Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function| `True`    |\n| `intercept_scaling` | float                                                         | Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased| `1`       |\n| `class_weight`      | dict or balanced                                              | Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.  .. versionadded:: 0.17    *class_weight='balanced| `None`    |\n| `random_state`      | int, RandomState instance                                     | Used when ``solver`` == 'sag', 'saga' or 'liblinear' to shuffle the data. See :term:`Glossary <random_state>` for details.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | `None`    |\n| `solver`            | (lbfgs, liblinear, newton - cg, newton - cholesky, sag, saga) | Algorithm to use in the optimization problem. Default is 'lbfgs'. To choose a solver, you might want to consider the following aspects:  - For small datasets, 'liblinear' is a good choice, whereas 'sag'   and 'saga' are faster for large ones; - For multiclass problems, only 'newton-cg', 'sag', 'saga' and   'lbfgs' handle multinomial loss; - 'liblinear' and 'newton-cholesky' can only handle binary classification   by default. To apply a one-versus-rest scheme for the multiclass setting   one can wrapt it with the `OneVsRestClassifier`. - 'newton-cholesky' is a good choice for `n_samples` >> `n_features`,   especially with one-hot encoded categorical features with rare   categories. Be aware that the memory usage of this solver has a quadratic   dependency on `n_features` because it explicitly computes the Hessian   matrix.  .. warning::    The choice of the algorithm depends on the penalty chosen and on    (multinomial) multiclass support:     ================= ============================== ======================    solver            penalty                        multinomial multiclass    ================= ============================== ======================    'lbfgs'           'l2', None                     yes    'liblinear'       'l1', 'l2'                     no    'newton-cg'       'l2', None                     yes    'newton-cholesky' 'l2', None                     no    'sag'             'l2', None                     yes    'saga'            'elasticnet', 'l1', 'l2', None yes    ================= ============================== ======================  .. note::    'sag' and 'saga' fast convergence is only guaranteed on features    with approximately the same scale. You can preprocess the data with    a scaler from :mod:`sklearn.preprocessing`.  .. seealso::    Refer to the User Guide for more information regarding    :class:`LogisticRegression` and more specifically the    :ref:`Table <Logistic_regression>`    summarizing solver/penalty supports.  .. versionadded:: 0.17    Stochastic Average Gradient descent solver. .. versionadded:: 0.19    SAGA solver. .. versionchanged:: 0.22     The default solver changed from 'liblinear' to 'lbfgs' in 0.22. .. versionadded:: 1.2    newton-cholesky solver. | `'lbfgs'` |\n| `max_iter`          | int                                                           | Maximum number of iterations taken for the solvers to converge| `100`     |\n| `multi_class`       | (auto, ovr, multinomial)                                      | If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.  .. versionadded:: 0.18    Stochastic Average Gradient descent solver for 'multinomial' case. .. versionchanged:: 0.22     Default changed from 'ovr' to 'auto' in 0.22. .. deprecated:: 1.5    ``multi_class`` was deprecated in version 1.5 and will be removed in 1.7.    From then on, the recommended 'multinomial' will always be used for    `n_classes >= 3`.    Solvers that do not support 'multinomial' will raise an error.    Use `sklearn.multiclass.OneVsRestClassifier(LogisticRegression())` if you    still want to use Ov| `'auto'`  |\n| `verbose`           | int                                                           | For the liblinear and lbfgs solvers set verbose to any positive number for verbosity| `0`       |\n| `warm_start`        | bool                                                          | When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver. See :term:`the Glossary <warm_start>`.  .. versionadded:: 0.17    *warm_start* to support *lbfgs*, *newton-cg*, *sag*, *saga* solvers| `False`   |\n| `n_jobs`            | int                                                           | Number of CPU cores used when parallelizing over classes if multi_class='ovr'\". This parameter is ignored when the ``solver`` is set to 'liblinear' regardless of whether 'multi_class' is specified or not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details| `None`    |\n| `l1_ratio`          | float                                                         | The Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``. Only used if ``penalty='elasticnet'``. Setting ``l1_ratio=0`` is equivalent to using ``penalty='l2'``, while setting ``l1_ratio=1`` is equivalent to using ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a combination of L1 and| `None`    |\n\n## Attributes\n\n| Name              | Type                                                        | Description                                                                                                                                                                                                                                                                                                                                              |\n|-------------------|-------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| classes_          | ndarray of shape (n_classes, )                              | A list of class labels known to the classifier.                                                                                                                                                                                                                                                                                                          |\n| coef_             | ndarray of shape (1, n_features) or (n_classes, n_features) | Coefficient of the features in the decision function.  `coef_` is of shape (1, n_features) when the given problem is binary. In particular, when `multi_class='multinomial'`, `coef_` corresponds to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False).                                                                                     |\n| intercept_        | ndarray of shape (1,) or (n_classes,)                       | Intercept (a.k.a. bias) added to the decision function.  If `fit_intercept` is set to False, the intercept is set to zero. `intercept_` is of shape (1,) when the given problem is binary. In particular, when `multi_class='multinomial'`, `intercept_` corresponds to outcome 1 (True) and `-intercept_` corresponds to outcome 0 (False).             |\n| n_features_in_    | int                                                         | Number of features seen during :term:`fit`.  .. versionadded:: 0.24                                                                                                                                                                                                                                                                                      |\n| feature_names_in_ | ndarray of shape (`n_features_in_`,)                        | Names of features seen during :term:`fit`. Defined only when `X` has feature names that are all strings.  .. versionadded:: 1.0                                                                                                                                                                                                                          |\n| n_iter_           | ndarray of shape (n_classes,) or (1, )                      | Actual number of iterations for all classes. If binary or multinomial, it returns only 1 element. For liblinear solver, only the maximum number of iteration across all classes is given.  .. versionchanged:: 0.20      In SciPy <= 1.0.0 the number of lbfgs iterations may exceed     ``max_iter``. ``n_iter_`` will now report at most ``max_iter``. |\n\n## See Also\n\nSGDClassifier : Incrementally trained logistic regression (when given\n    the parameter ``loss=\"log_loss\"``).\nLogisticRegressionCV : Logistic regression with built-in cross validation.\n\n## Notes\n\nThe underlying C implementation uses a random number generator to\nselect features when fitting the model. It is thus not uncommon,\nto have slightly different results for the same input data. If\nthat happens, try with a smaller tol parameter.\n\nPredict output may not match that of standalone liblinear in certain\ncases. See :ref:`differences from liblinear <liblinear_differences>`\nin the narrative documentation.\n\n## References\n\n\nL-BFGS-B -- Software for Large-scale Bound-constrained Optimization\n    Ciyou Zhu, Richard Byrd, Jorge Nocedal and Jose Luis Morales.\n    http://users.iems.northwestern.edu/~nocedal/lbfgsb.html\n\nLIBLINEAR -- A Library for Large Linear Classification\n    https://www.csie.ntu.edu.tw/~cjlin/liblinear/\n\nSAG -- Mark Schmidt, Nicolas Le Roux, and Francis Bach\n    Minimizing Finite Sums with the Stochastic Average Gradient\n    https://hal.inria.fr/hal-00860051/document\n\nSAGA -- Defazio, A., Bach F. & Lacoste-Julien S. (2014).\n        :arxiv:`\"SAGA: A Fast Incremental Gradient Method With Support\n        for Non-Strongly Convex Composite Objectives\" <1407.0202>`\n\nHsiang-Fu Yu, Fang-Lan Huang, Chih-Jen Lin (2011). Dual coordinate descent\n    methods for logistic regression and maximum entropy models.\n    Machine Learning 85(1-2):41-75.\n    https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf\n\n## Examples\n\n```python\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.linear_model import LogisticRegression\n>>> X, y = load_iris(return_X_y=True)\n>>> clf = LogisticRegression(random_state=0).fit(X, y)\n>>> clf.predict(X[:2, :])\narray([0, 0])\n>>> clf.predict_proba(X[:2, :])\narray([[9.8...e-01, 1.8...e-02, 1.4...e-08],\n       [9.7...e-01, 2.8...e-02, ...e-08]])\n>>> clf.score(X, y)\n0.97...\n```\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [fit](#sklearn.linear_model.LogisticRegression.fit) | Fit the model according to the given training data. |\n| [predict_log_proba](#sklearn.linear_model.LogisticRegression.predict_log_proba) | Predict logarithm of probability estimates. |\n| [predict_proba](#sklearn.linear_model.LogisticRegression.predict_proba) | Probability estimates. |\n\n### fit { #sklearn.linear_model.LogisticRegression.fit }\n\n`linear_model.LogisticRegression.fit(X, y, sample_weight=None)`\n\nFit the model according to the given training data.\n\n#### Parameters\n\n| Name            | Type                                          | Description                                                                                                                                                                                 | Default      |\n|-----------------|-----------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|\n| `X`             | array-like, sparse matrix                     | Training vector, where `n_samples` is the number of samples and `n_features` is the number of features.                                                                                     | `array-like` |\n| `y`             | array-like of shape (n_samples,)              | Target vector relative to X.                                                                                                                                                                | _required_   |\n| `sample_weight` | array-like of shape (n_samples,) default=None | Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.  .. versionadded:: 0.17    *sample_weight* support to LogisticRegression. | `None`       |\n\n#### Returns\n\n| Type   | Description       |\n|--------|-------------------|\n| self   | Fitted estimator. |\n\n#### Notes\n\nThe SAGA solver supports both float64 and float32 bit arrays.\n\n### predict_log_proba { #sklearn.linear_model.LogisticRegression.predict_log_proba }\n\n`linear_model.LogisticRegression.predict_log_proba(X)`\n\nPredict logarithm of probability estimates.\n\nThe returned estimates for all classes are ordered by the\nlabel of classes.\n\n#### Parameters\n\n| Name   | Type                                        | Description                                                                                                 | Default    |\n|--------|---------------------------------------------|-------------------------------------------------------------------------------------------------------------|------------|\n| `X`    | array-like of shape (n_samples, n_features) | Vector to be scored, where `n_samples` is the number of samples and `n_features` is the number of features. | _required_ |\n\n#### Returns\n\n| Type                                       | Description                                                                                                                        |\n|--------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------|\n| array-like of shape (n_samples, n_classes) | Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in ``self.classes_``. |\n\n### predict_proba { #sklearn.linear_model.LogisticRegression.predict_proba }\n\n`linear_model.LogisticRegression.predict_proba(X)`\n\nProbability estimates.\n\nThe returned estimates for all classes are ordered by the\nlabel of classes.\n\nFor a multi_class problem, if multi_class is set to be \"multinomial\"\nthe softmax function is used to find the predicted probability of\neach class.\nElse use a one-vs-rest approach, i.e. calculate the probability\nof each class assuming it to be positive using the logistic function\nand normalize these values across all the classes.\n\n#### Parameters\n\n| Name   | Type                                        | Description                                                                                                 | Default    |\n|--------|---------------------------------------------|-------------------------------------------------------------------------------------------------------------|------------|\n| `X`    | array-like of shape (n_samples, n_features) | Vector to be scored, where `n_samples` is the number of samples and `n_features` is the number of features. | _required_ |\n\n#### Returns\n\n| Type                                       | Description                                                                                                                    |\n|--------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------|\n| array-like of shape (n_samples, n_classes) | Returns the probability of the sample for each class in the model, where classes are ordered as they are in ``self.classes_``. |","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"LogisticRegression.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","quartodoc":{"sidebar":"../_sidebar.yml","package":"quartodoc","source_dir":"../../src/rohith_ai_839/pipelines/data_science/","sections":[{"title":"ML Stagewise Documentation","desc":"Modeling Stage","package":"sklearn.linear_model","contents":["LogisticRegression"]},{"title":"ML Stagewise Documentation","desc":"Drfit Stage","package":"evidently.metric_preset","contents":["DataDriftPreset"]},{"title":"ML Stagewise Documentation","desc":"Nodes","package":"nodes","contents":["split_data","train_model","quality_drift_check","evaluate_model","prediction_drift_check","plot_and_save","report_plotly"]}]},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}